#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes for Failed to commit metaspace.
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is
#     placed in the first 4GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (virtualSpaceNode.cpp:110), pid=12628, tid=32004
#
# JRE version: Java(TM) SE Runtime Environment (18.0.2.1+1) (build 18.0.2.1+1-1)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (18.0.2.1+1-1, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: -XX:+ShowCodeDetailsInExceptionMessages -agentlib:jdwp=transport=dt_socket,suspend=y,address=localhost:58505 -ea -Dfile.encoding=UTF-8 org.testng.remote.RemoteTestNG -serport 58479 -protocol json -d C:\Users\Nischitha h s\eclipse-workspace\Selenium_training_ELF39\test-output C:\Users\Nischitha h s\AppData\Local\Temp\testng-eclipse--1805901350\testng-customsuite.xml

Host: Intel(R) Core(TM) i5-1035G1 CPU @ 1.00GHz, 8 cores, 7G,  Windows 11 , 64 bit Build 22000 (10.0.22000.708)
Time: Sat Nov 19 12:24:11 2022 India Standard Time elapsed time: 53.669193 seconds (0d 0h 0m 53s)

---------------  T H R E A D  ---------------

Current thread (0x000001a329c35480):  JavaThread "main" [_thread_in_vm, id=32004, stack(0x00000056f5400000,0x00000056f5500000)]

Stack: [0x00000056f5400000,0x00000056f5500000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6993aa]
V  [jvm.dll+0x7f46dd]
V  [jvm.dll+0x7f5fee]
V  [jvm.dll+0x7f66a3]
V  [jvm.dll+0x25cf1f]
V  [jvm.dll+0x7f03eb]
V  [jvm.dll+0x63f526]
V  [jvm.dll+0x1d75ce]
V  [jvm.dll+0x641ecb]
V  [jvm.dll+0x641cce]
V  [jvm.dll+0x63feee]
V  [jvm.dll+0x38e1f2]
V  [jvm.dll+0x1fa60b]
V  [jvm.dll+0x55dc2e]
V  [jvm.dll+0x76eabd]
V  [jvm.dll+0x76ea1a]
V  [jvm.dll+0x42de11]
V  [jvm.dll+0x440a23]
C  [java.dll+0x1657]

Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.ClassLoader.defineClass0(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BIILjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;+0 java.base@18.0.2.1
j  java.lang.System$2.defineClass(Ljava/lang/ClassLoader;Ljava/lang/Class;Ljava/lang/String;[BLjava/security/ProtectionDomain;ZILjava/lang/Object;)Ljava/lang/Class;+17 java.base@18.0.2.1
j  java.lang.invoke.MethodHandles$Lookup$ClassDefiner.defineClass(ZLjava/lang/Object;)Ljava/lang/Class;+54 java.base@18.0.2.1
j  java.lang.invoke.InvokerBytecodeGenerator.loadMethod([B)Ljava/lang/invoke/MemberName;+19 java.base@18.0.2.1
j  java.lang.invoke.InvokerBytecodeGenerator.generateCustomizedCode(Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MemberName;+30 java.base@18.0.2.1
j  java.lang.invoke.LambdaForm.compileToBytecode()V+69 java.base@18.0.2.1
J 294 c1 java.lang.invoke.LambdaForm.prepare()V java.base@18.0.2.1 (112 bytes) @ 0x000001a331b7be6c [0x000001a331b7bcc0+0x00000000000001ac]
J 293 c1 java.lang.invoke.MethodHandle.<init>(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;)V java.base@18.0.2.1